module domrange
{
  interface Range {
    readonly attribute Node? startContainer;
    readonly attribute long startOffset;
    readonly attribute Node? endContainer;
    readonly attribute long endOffset;
    readonly attribute boolean collapsed;
    readonly attribute Node commonAncestorContainer;
  
    void               setStart(Node refNode, unsigned long offset);
    void               setEnd(Node refNode, unsigned long offset);
    void               setStartBefore(Node refNode);
    void               setStartAfter(Node refNode);
    void               setEndBefore(Node refNode);
    void               setEndAfter(Node refNode);
    void               collapse(boolean toStart);
    void               selectNode(Node refNode);
    void               selectNodeContents(Node refNode);
  
    enum CompareHow : unsigned short {
      START_TO_START = 0,
      START_TO_END   = 1,
      END_TO_END     = 2,
      END_TO_START   = 3
    };
  
    short              compareBoundaryPoints(CompareHow how,
                                             Range sourceRange);
    void               deleteContents()
    DocumentFragment   extractContents();
    DocumentFragment   cloneContents();
    void               insertNode(Node newNode);
    void               surroundContents(Node newParent);
    Range              cloneRange();
    void               detach();
  
    boolean            isPointInRange(Node parent, long offset);
    short              comparePoint(Node parent, long offset);
  
    boolean            intersectsNode(Node node);
  
    stringifier;
  };

  interface Selection {
    readonly attribute Node? anchorNode;
    readonly attribute long anchorOffset;
    readonly attribute Node? focusNode;
    readonly attribute long focusOffset;
  
    readonly attribute boolean isCollapsed;
    void               collapse(Node parentNode, long offset);
    void               collapseToStart();
    void               collapseToEnd();
  
    void               extend(Node parentNode, long offset);
    void               modify(DOMString alter, DOMString direction, DOMString granularity);
  
    void               selectAllChildren(Node parentNode);
    void               deleteFromDocument();
  
    readonly attribute long rangeCount;
    Range              getRangeAt(long index);
    void               addRange(Range range);
    void               removeRange(Range range);
    void               removeAllRanges();
  
    stringifier;
  };

  partial interface Document {
    Range createRange();
    Selection getSelection();
  };

  partial interface Window {
    Selection getSelection();
  };


};
