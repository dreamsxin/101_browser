module websockets
{
  [Constructor(DOMString url, optional DOMString protocols),
   Constructor(DOMString url, optional DOMString[] protocols)]
  interface WebSocket : EventTarget {
    readonly attribute DOMString url;
  
    // ready state
    const unsigned short CONNECTING = 0;
    const unsigned short OPEN = 1;
    const unsigned short CLOSING = 2;
    const unsigned short CLOSED = 3;
    readonly attribute unsigned short readyState;
    readonly attribute unsigned long bufferedAmount;
  
    // networking
             attribute Function? onopen;
             attribute Function? onerror;
             attribute Function? onclose;
    readonly attribute DOMString extensions;
    readonly attribute DOMString protocol;
    void close([Clamp] optional unsigned short code, optional DOMString reason);
  
    // messaging
             attribute Function? onmessage;
             attribute DOMString binaryType;
    void send(DOMString data);
    void send(ArrayBuffer data);
    void send(Blob data);
  };

  [Constructor(DOMString type, optional CloseEventInit eventInitDict)]
  interface CloseEvent : Event {
    readonly attribute boolean wasClean;
    readonly attribute unsigned short code;
    readonly attribute DOMString reason;
  };
  
  dictionary CloseEventInit : EventInit {
    boolean wasClean;
    unsigned short code;
    DOMString reason;
  };


};
